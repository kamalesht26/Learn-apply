GitHub!
=======

GitHub is a code hosting platform for version control and collaboration. It lets us solve the problem by collaborating with developers around 
the world to create a new software & technologies.

Types:
-----
Centralised version control system
Distributed version control system

GIT != GIThub

Github is online repository where you use can store our repository.

Essentials
----------
*repositories
*branches
*commits
*Pull Requests

We can create repository and learn GitHub’s Pull Request workflow, a popular way to create and review code.

How to use?
-----------
*Command line

*install Git (the version control software GitHub is built on).

No coding necessary;only GitHub.com account and Internet access is enough. 

Step 1. Create a Repository
---------------------------
A repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, 
spreadsheets, and data sets – anything your project needs.

**Any changes in the repositories will get tracked in the git version controller.
**If there is any issues, it can be assigned to teammates to discuss and resolve. Pull request are used to resolve issues.

We recommend including a README, or a file with information about your project.

GitHub makes it easy to add one at the same time you create your new repository. It also offers other common options such as a
license file.

Your repository can be a place where you store ideas, resources, or even share and discuss things with others.


Some of the most commonly-used features. Here are a few other items you can find in GitHub repositories:

    Project boards: Create Kanban-style task tracking board within GitHub
    Wiki: Create and store relevant project documentation
    Insights: View a drop-down menu that contains links to analytics tools for your repository including:
        Pulse: Find information about the work that has been completed and the work that’s in-progress in this project dashboard
        Graphs: Graphs provide a more granular view of the repository activity including who contributed to the repository, who forked it, 
        and when they completed the work

We learned about a special file called the README.md. Here are a few other special files you can add to your repositories:

    CONTRIBUTING.md: The CONTRIBUTING.md is used to describe the process for contributing to the repository.
    A link to the CONTRIBUTING.md file is shown anytime someone creates a new issue or pull request.
    
    ISSUE_TEMPLATE.md: The ISSUE_TEMPLATE.md is another file you can use to pre-populate the body of an issue. For example, 
    if you always need the same types of information for bug reports, include it in the issue template, and every new issue will
    be opened with your recommended starter text.

**GitHub Pages:
Now, on to business! GitHub Pages allow you to serve a static site from a repository. 

Step 2. Create a Branch
------------------------

Branching is the way to work on different versions of a repository at one time.

**By default our repository has one branch named master which is considered to be the definitive branch. We use branches to experiment and
make edits and after that a lot of refinement is done before committing them to master.

When you create a branch off the master branch, you’re making a copy, or snapshot, of master as it was at that point in time. 

If someone else made changes to the master branch while you were working on your branch, you could pull in those updates.

**Pull in request is added to get ideas to fix by collaboration from lot of people and then refinement is done before committing to the master.

**GitHub flow:
People use different workflows to contribute to software projects, but the simplest and most effective way to contribute on GitHub is the GitHub flow.
It is nothing but branching.
Example:
--------
story.txt
story-joe-edit.txt
story-joe-edit-reviewed.txt

Here master is production and any fix planned should be first should be done to branches dev and test environment before production that is master.

Step 3. Make and commit changes

Branch which is a copy of master. Let’s make some edits.

On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. 
Commit messages capture the history of your changes, so other contributors can understand what you’ve done and why.
